generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                      String       @id @default(uuid())
  name                    String
  mobile                  String       @unique
  uniqueId                String       @unique
  pin_hash                String       @default("")
  role                    role
  section                 String?
  active_flag             Boolean      @default(false)
  created_at              DateTime     @default(now())
  pin_expires_at          DateTime?
  isDlt                   Boolean      @default(false)
  floor_id                Int?
  shopId                  String?                    // üè™ new field
  shop                    Shop?       @relation(fields: [shopId], references: [id])

  attendanceAsStaff       Attendance[] @relation("AttendanceStaff")
  attendanceAsSubmittedBy Attendance[] @relation("AttendanceSubmittedBy")
  sales                   Sales[]
  scored                  Score[]      @relation("ScoredByUser")
  scores                  Score[]      @relation("ScoreUser")
  tokens                  Token[]
  upload                  Upload[]           
  floor                   Floor?       @relation(fields: [floor_id], references: [id])
  walkOutsAsStaff         walkOut[]    @relation("WalkOutStaff")
  walkOutsAsSubmitted     walkOut[]    @relation("WalkOutSubmittedBy")
  shopOwned               Shop?        @relation("ShopOwner")
}

model Floor {
  id       Int     @id @default(autoincrement())
  name     String
  isDlt    Boolean @default(false)
  shopId   String?
  shop     Shop?   @relation(fields: [shopId], references: [id])
  users    User[]
}


model KPI {
  id         String     @id @default(uuid())
  name       String
  frequency  Frequency?
  weight     Float      @default(1)
  max_points Float      @default(5)       
  isDlt      Boolean    @default(false)
  status     Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  scores     Score[]
  shopId String?
shop   Shop? @relation(fields: [shopId], references: [id])

}

model Sales {
  id          String   @id @default(uuid())
  year_code   String?
  staffId     String
  qtySold     Int?
  salesAmount Decimal
  prodValue   Decimal
  profit      Decimal?
  per         Decimal
  weight      Float?
  points      Decimal
  createdAt   DateTime @default(now())
  date        DateTime
  updatedAt   DateTime @updatedAt
  uploadId    Int
  shopId      String?
  shop        Shop?    @relation(fields: [shopId], references: [id])

  staff       User     @relation(fields: [staffId], references: [id])
  upload      Upload   @relation("UploadSales", fields: [uploadId], references: [id])

  @@unique([staffId, year_code])
}


model Attendance {
  id             String   @id @default(uuid())
  staffId        String
  submittedBy_id String
  date           DateTime
  halfDays       String
  fullDays       String
  leaveCount     String
  totalDays      String
  totalDaysInMonth Int? 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  staff          User     @relation("AttendanceStaff", fields: [staffId], references: [id])
  submittedBy    User     @relation("AttendanceSubmittedBy", fields: [submittedBy_id], references: [id])
  shopId    String?
shop      Shop?   @relation(fields: [shopId], references: [id])

}
model Shop {
  id          String    @id @default(uuid())
  address     String?
  contact     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt


  owner       User?     @relation("ShopOwner", fields: [ownerId], references: [id])
  ownerId     String?   @unique
  floors      Floor[]
  users       User[]
  sales       Sales[]
  attendances Attendance[]
  scores      Score[]
  tokens      Token[]
  walkouts    walkOut[]
  uploads     Upload[]
  kpis        KPI[]
}


model Score {
  id                 Int         @id @default(autoincrement())
  user_id            String
  kpi_id             String?
  points             Float
  score              Int?      @default(0)
  evalutedby_user_id String
  status             ScoreStatus
  isDlt              Boolean     @default(false)
  comment            String?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  evalutedDate       DateTime?   
  trend              String?
  evalutedby         User        @relation("ScoredByUser", fields: [evalutedby_user_id], references: [id])
  kpi                KPI?        @relation(fields: [kpi_id], references: [id])
  user               User        @relation("ScoreUser", fields: [user_id], references: [id])
  shopId    String?
shop      Shop?   @relation(fields: [shopId], references: [id])

}

model Token {
  id          Int      @id @default(autoincrement())
  user_id     String
  token       String   @unique
  expiry      DateTime?
  device_info String?  // Store device/browser info
  ip_address  String?  // Store IP address
  user_agent  String?  // Store user agent
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
  shopId    String?
shop      Shop?   @relation(fields: [shopId], references: [id])


  @@index([user_id])
}

model walkOut {
  id             Int      @id @default(autoincrement())
  description    String
  isDlt          Boolean  @default(false)
  priority       Priority
  itemNameId     Int
  type_id        Int
  staffId        String
  submittedBy_id String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  itemName       itemName @relation(fields: [itemNameId], references: [id])
  staff          User     @relation("WalkOutStaff", fields: [staffId], references: [id])
  submittedBy    User     @relation("WalkOutSubmittedBy", fields: [submittedBy_id], references: [id])
  type           itemType @relation(fields: [type_id], references: [id])
  shopId    String?
shop      Shop?   @relation(fields: [shopId], references: [id])

}

model itemName {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  walkouts walkOut[]
}

model itemType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  walkouts walkOut[]
}

model Upload {
  id            Int      @id @default(autoincrement())
  originalname  String
  mimetype      String
  path          String
  size          Int
  uploadedBy_id String?
  uploadedAt    DateTime @default(now())
  sales         Sales[]  @relation("UploadSales")
  uploaded_by   User?    @relation(fields: [uploadedBy_id], references: [id])
  shopId    String?
shop      Shop?   @relation(fields: [shopId], references: [id])

}

enum role {
  Owner
  FloorSupervisor @map("Floor-Supervisor")
  Manager
  Accountant
  Staff
}

enum Status {
  pending
  approved
  rejected
}

enum Frequency {
  daily
  weekly
  monthly
}

enum ScoreStatus {
  pending
  approved
  rejected
}

enum Type {
  half
  full
  leavem
}

enum SaleType {
  TRANSACTION
  SUMMARY
}

enum Priority {
  Low
  Medium
  High
}
